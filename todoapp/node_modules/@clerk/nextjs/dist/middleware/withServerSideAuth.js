"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withServerSideAuth = void 0;
const backend_1 = require("@clerk/backend");
const clerk_1 = require("../server/clerk");
const utils_1 = require("./utils");
const EMPTY_GSSP_RESPONSE = { props: {} };
const decorateResponseWithObservabilityHeaders = (res, requestState) => {
    requestState.message && res.setHeader(backend_1.constants.Headers.AuthMessage, encodeURIComponent(requestState.message));
    requestState.reason && res.setHeader(backend_1.constants.Headers.AuthReason, encodeURIComponent(requestState.reason));
    requestState.status && res.setHeader(backend_1.constants.Headers.AuthStatus, encodeURIComponent(requestState.status));
};
/**
 * @deprecated The /ssr path is deprecated and will be removed in the next major release.
 * Use the exports from /server instead
 */
const withServerSideAuth = (cbOrOptions, options) => {
    const cb = typeof cbOrOptions === 'function' ? cbOrOptions : undefined;
    const opts = (options ? options : typeof cbOrOptions !== 'function' ? cbOrOptions : {}) || {};
    // Support both loadOrganization and the older loadOrg option without breaking changes
    // TODO: Remove pre v5
    opts.loadOrganization = opts.loadOrganization || opts.loadOrg || undefined;
    return async (ctx) => {
        const requestState = await (0, utils_1.authenticateRequest)(ctx, opts);
        if (requestState.isUnknown) {
            decorateResponseWithObservabilityHeaders(ctx.res, requestState);
            ctx.res.writeHead(401, { 'Content-Type': 'text/html' });
            ctx.res.end();
            return EMPTY_GSSP_RESPONSE;
        }
        if (requestState.isInterstitial) {
            decorateResponseWithObservabilityHeaders(ctx.res, requestState);
            ctx.res.writeHead(401, { 'Content-Type': 'text/html' });
            const interstitial = await clerk_1.clerkClient.remotePublicInterstitial({
                apiUrl: clerk_1.API_URL,
                publishableKey: clerk_1.PUBLISHABLE_KEY,
                frontendApi: clerk_1.FRONTEND_API,
                pkgVersion: clerk_1.JS_VERSION,
                proxyUrl: requestState.proxyUrl,
                isSatellite: requestState.isSatellite,
                domain: requestState.domain,
                debugData: (0, backend_1.debugRequestState)(requestState),
            });
            ctx.res.end(interstitial);
            return EMPTY_GSSP_RESPONSE;
        }
        const legacyAuthData = { ...requestState.toAuth(), claims: requestState.toAuth().sessionClaims };
        const contextWithAuth = (0, utils_1.injectAuthIntoRequest)(ctx, legacyAuthData);
        const callbackResult = (await cb?.(contextWithAuth)) || {};
        return (0, utils_1.injectSSRStateIntoProps)(callbackResult, (0, clerk_1.makeAuthObjectSerializable)((0, clerk_1.sanitizeAuthObject)(legacyAuthData)));
    };
};
exports.withServerSideAuth = withServerSideAuth;
