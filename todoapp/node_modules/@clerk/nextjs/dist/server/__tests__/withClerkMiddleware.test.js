"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const expect_type_1 = require("expect-type");
const withClerkMiddleware_1 = require("../withClerkMiddleware");
describe('withClerkMiddleware', () => {
    describe('Type tests', () => {
        describe('WithAuthOptions', () => {
            it('is the options argument for withClerkMiddleware', () => {
                () => {
                    (0, withClerkMiddleware_1.withClerkMiddleware)({}, {});
                };
            });
            it('can receive the appropriate keys', () => {
                (0, expect_type_1.expectTypeOf)({ publishableKey: '', secretKey: '' }).toMatchTypeOf();
                (0, expect_type_1.expectTypeOf)({ frontendApi: '', secretKey: '' }).toMatchTypeOf();
                (0, expect_type_1.expectTypeOf)({ publishableKey: '', apiKey: '' }).toMatchTypeOf();
                (0, expect_type_1.expectTypeOf)({ frontendApi: '', apiKey: '' }).toMatchTypeOf();
            });
            describe('Multi domain', () => {
                const defaultProps = { publishableKey: '', secretKey: '' };
                it('proxyUrl (primary app)', () => {
                    (0, expect_type_1.expectTypeOf)({ ...defaultProps, proxyUrl: 'test' }).toMatchTypeOf();
                });
                it('proxyUrl + isSatellite (satellite app)', () => {
                    (0, expect_type_1.expectTypeOf)({ ...defaultProps, proxyUrl: 'test', isSatellite: true }).toMatchTypeOf();
                });
                it('domain + isSatellite (satellite app)', () => {
                    (0, expect_type_1.expectTypeOf)({ ...defaultProps, domain: 'test', isSatellite: true }).toMatchTypeOf();
                });
                it('only domain is not allowed', () => {
                    (0, expect_type_1.expectTypeOf)({ ...defaultProps, domain: 'test' }).not.toMatchTypeOf();
                });
                it('only isSatellite is not allowed', () => {
                    (0, expect_type_1.expectTypeOf)({ ...defaultProps, isSatellite: true }).not.toMatchTypeOf();
                });
                it('proxyUrl + domain is not allowed', () => {
                    (0, expect_type_1.expectTypeOf)({ ...defaultProps, proxyUrl: 'test', domain: 'test' }).not.toMatchTypeOf();
                });
                it('proxyUrl + domain + isSatellite is not allowed', () => {
                    (0, expect_type_1.expectTypeOf)({
                        ...defaultProps,
                        proxyUrl: 'test',
                        domain: 'test',
                        isSatellite: true,
                    }).not.toMatchTypeOf();
                });
            });
        });
    });
});
