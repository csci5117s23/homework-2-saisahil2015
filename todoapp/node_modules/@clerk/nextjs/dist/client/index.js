"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClerkProvider = void 0;
const tslib_1 = require("tslib");
const clerk_react_1 = require("@clerk/clerk-react");
const router_1 = require("next/router");
const react_1 = tslib_1.__importDefault(require("react"));
const invalidateNextRouterCache_1 = require("./invalidateNextRouterCache");
// TODO: Import from shared once [JS-118] is done
const useSafeLayoutEffect = typeof window !== 'undefined' ? react_1.default.useLayoutEffect : react_1.default.useEffect;
(0, clerk_react_1.__internal__setErrorThrowerOptions)({
    packageName: '@clerk/nextjs',
});
tslib_1.__exportStar(require("@clerk/clerk-react"), exports);
function ClerkProvider({ children, ...rest }) {
    // Allow for overrides without making the type public
    const { 
    // @ts-expect-error
    authServerSideProps, frontendApi, publishableKey, proxyUrl, domain, isSatellite, signInUrl, 
    // @ts-expect-error
    __clerk_ssr_state, clerkJSUrl, __unstable_invokeMiddlewareOnAuthStateChange = true, ...restProps } = rest;
    const { push } = (0, router_1.useRouter)();
    clerk_react_1.ClerkProvider.displayName = 'ReactClerkProvider';
    useSafeLayoutEffect(() => {
        window.__unstable__onBeforeSetActive = invalidateNextRouterCache_1.invalidateNextRouterCache;
        window.__unstable__onAfterSetActive = () => {
            // Re-run the middleware every time there auth state changes.
            // This enables complete control from a centralised place (NextJS middleware),
            // as we will invoke it every time the client-side auth state changes, eg: signing-out, switching orgs, etc.
            if (__unstable_invokeMiddlewareOnAuthStateChange) {
                void push(window.location.href);
            }
        };
    }, []);
    return (
    // @ts-expect-error
    react_1.default.createElement(clerk_react_1.ClerkProvider, { frontendApi: frontendApi || process.env.NEXT_PUBLIC_CLERK_FRONTEND_API || '', publishableKey: publishableKey || process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY || '', clerkJSUrl: clerkJSUrl || process.env.NEXT_PUBLIC_CLERK_JS, proxyUrl: proxyUrl || process.env.NEXT_PUBLIC_CLERK_PROXY_URL || '', domain: domain || process.env.NEXT_PUBLIC_CLERK_DOMAIN || '', isSatellite: isSatellite || process.env.NEXT_PUBLIC_CLERK_IS_SATELLITE === 'true', signInUrl: signInUrl || process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL || '', navigate: to => push(to), 
        // withServerSideAuth automatically injects __clerk_ssr_state
        // getAuth returns a user-facing authServerSideProps that hides __clerk_ssr_state
        initialState: authServerSideProps?.__clerk_ssr_state || __clerk_ssr_state, ...restProps }, children));
}
exports.ClerkProvider = ClerkProvider;
