Next Js Setup:

- npx create-next-app@latest nextjs-starter --use-npm
This is a bit more than we need to be fair, but it’s OK.
Normal interactions apply npm run dev for development server.
This will ask a few questions
I chose no typescript, no eslint, yes src/ no app/ and the default import alias.

Copy/read/paste/edit (I.E. let’s go figure out what that did and what each part does…)
Link component: https://nextjs.org/learn/basics/navigate-between-pages/link-componentLinks to an external site.
Advanced Routing https://nextjs.org/docs/routing/introduction


Concepts
Components as architecture and helper functions
Convention based routing https://nextjs.org/docs/routing/introductionLinks to an external site.
PRO: no metadata
CON: no metadata, just magic
components in “pages” folder-tree map to the URLs directly. Filename dictates URL path.
Links have to be fake
Never use <a href> use <Link href>
You can pass objects to the Link if you need to
If you use an <a> tag you get a page reload (this is bad)

Advanced ideas
Nested Routes
Nested routes like /web/public/funPage can be done with folders:

web/
web/index.js (the component for url /web/)
web/public/
web/public/index.js (the component for the url /web/index/
web/public/funPage.js
Direct router access
https://nextjs.org/docs/api-reference/next/routerLinks to an external site.

Key – use the “useRouter” hook: const router = useRouter() This will have nextjs inject the router API into your component for your use.

checking “query parameters”, exact path, checking “isReady” to see if the router’s actually loaded, etc. as well as programmatic navigation.
Routes with parameters
Often you’ll want to build pages like /todo/1391123 to represent specific elements in a collection This has two parts:

Name your file correctly: /todo/[id].js
Access the id on page load from the router parameters!